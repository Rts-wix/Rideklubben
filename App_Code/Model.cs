//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
public partial class Billede
{
    #region Primitive Properties

    public virtual int BilledeID
    {
        get;
        set;
    }

    public virtual byte[] full
    {
        get;
        set;
    }

    public virtual byte[] large
    {
        get;
        set;
    }

    public virtual byte[] small
    {
        get;
        set;
    }

    public virtual byte[] tiny
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<Hest> Heste
    {
        get
        {
            if (_heste == null)
            {
                var newCollection = new FixupCollection<Hest>();
                newCollection.CollectionChanged += FixupHeste;
                _heste = newCollection;
            }
            return _heste;
        }
        set
        {
            if (!ReferenceEquals(_heste, value))
            {
                var previousValue = _heste as FixupCollection<Hest>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupHeste;
                }
                _heste = value;
                var newValue = value as FixupCollection<Hest>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupHeste;
                }
            }
        }
    }
    private ICollection<Hest> _heste;

    #endregion
    #region Association Fixup

    private void FixupHeste(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Hest item in e.NewItems)
            {
                item.Billede = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Hest item in e.OldItems)
            {
                if (ReferenceEquals(item.Billede, this))
                {
                    item.Billede = null;
                }
            }
        }
    }

    #endregion
}
public partial class Ejerskab
{
    #region Primitive Properties

    public virtual short andele
    {
        get;
        set;
    }

    public virtual int EjerId
    {
        get { return _ejerId; }
        set
        {
            if (_ejerId != value)
            {
                if (Ryttere_Ejer != null && Ryttere_Ejer.RytterEjerId != value)
                {
                    Ryttere_Ejer = null;
                }
                _ejerId = value;
            }
        }
    }
    private int _ejerId;

    public virtual int HesteID
    {
        get { return _hesteID; }
        set
        {
            if (_hesteID != value)
            {
                if (Heste != null && Heste.HesteId != value)
                {
                    Heste = null;
                }
                _hesteID = value;
            }
        }
    }
    private int _hesteID;

    #endregion
    #region Navigation Properties

    public virtual Hest Heste
    {
        get { return _heste; }
        set
        {
            if (!ReferenceEquals(_heste, value))
            {
                var previousValue = _heste;
                _heste = value;
                FixupHeste(previousValue);
            }
        }
    }
    private Hest _heste;

    public virtual Rytter_Ejer Ryttere_Ejer
    {
        get { return _ryttere_Ejer; }
        set
        {
            if (!ReferenceEquals(_ryttere_Ejer, value))
            {
                var previousValue = _ryttere_Ejer;
                _ryttere_Ejer = value;
                FixupRyttere_Ejer(previousValue);
            }
        }
    }
    private Rytter_Ejer _ryttere_Ejer;

    #endregion
    #region Association Fixup

    private void FixupHeste(Hest previousValue)
    {
        if (previousValue != null && previousValue.Ejerskaber.Contains(this))
        {
            previousValue.Ejerskaber.Remove(this);
        }

        if (Heste != null)
        {
            if (!Heste.Ejerskaber.Contains(this))
            {
                Heste.Ejerskaber.Add(this);
            }
            if (HesteID != Heste.HesteId)
            {
                HesteID = Heste.HesteId;
            }
        }
    }

    private void FixupRyttere_Ejer(Rytter_Ejer previousValue)
    {
        if (previousValue != null && previousValue.Ejerskaber.Contains(this))
        {
            previousValue.Ejerskaber.Remove(this);
        }

        if (Ryttere_Ejer != null)
        {
            if (!Ryttere_Ejer.Ejerskaber.Contains(this))
            {
                Ryttere_Ejer.Ejerskaber.Add(this);
            }
            if (EjerId != Ryttere_Ejer.RytterEjerId)
            {
                EjerId = Ryttere_Ejer.RytterEjerId;
            }
        }
    }

    #endregion
}
public partial class Hest
{
    #region Primitive Properties

    public virtual int HesteId
    {
        get;
        set;
    }

    public virtual string Navn
    {
        get;
        set;
    }

    public virtual string Fødestald
    {
        get;
        set;
    }

    public virtual System.DateTime FødeDato
    {
        get;
        set;
    }

    public virtual double Højde
    {
        get;
        set;
    }

    public virtual double Vægt
    {
        get;
        set;
    }

    public virtual bool Hingst
    {
        get;
        set;
    }

    public virtual string BilledeSti
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Billede Billede
    {
        get { return _billede; }
        set
        {
            if (!ReferenceEquals(_billede, value))
            {
                var previousValue = _billede;
                _billede = value;
                FixupBillede(previousValue);
            }
        }
    }
    private Billede _billede;

    public virtual ICollection<Ejerskab> Ejerskaber
    {
        get
        {
            if (_ejerskaber == null)
            {
                var newCollection = new FixupCollection<Ejerskab>();
                newCollection.CollectionChanged += FixupEjerskaber;
                _ejerskaber = newCollection;
            }
            return _ejerskaber;
        }
        set
        {
            if (!ReferenceEquals(_ejerskaber, value))
            {
                var previousValue = _ejerskaber as FixupCollection<Ejerskab>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupEjerskaber;
                }
                _ejerskaber = value;
                var newValue = value as FixupCollection<Ejerskab>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupEjerskaber;
                }
            }
        }
    }
    private ICollection<Ejerskab> _ejerskaber;

    public virtual ICollection<Hest> Faderskaber
    {
        get
        {
            if (_faderskaber == null)
            {
                var newCollection = new FixupCollection<Hest>();
                newCollection.CollectionChanged += FixupFaderskaber;
                _faderskaber = newCollection;
            }
            return _faderskaber;
        }
        set
        {
            if (!ReferenceEquals(_faderskaber, value))
            {
                var previousValue = _faderskaber as FixupCollection<Hest>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupFaderskaber;
                }
                _faderskaber = value;
                var newValue = value as FixupCollection<Hest>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupFaderskaber;
                }
            }
        }
    }
    private ICollection<Hest> _faderskaber;

    public virtual Hest Fader
    {
        get { return _fader; }
        set
        {
            if (!ReferenceEquals(_fader, value))
            {
                var previousValue = _fader;
                _fader = value;
                FixupFader(previousValue);
            }
        }
    }
    private Hest _fader;

    public virtual ICollection<Hest> Moderskaber
    {
        get
        {
            if (_moderskaber == null)
            {
                var newCollection = new FixupCollection<Hest>();
                newCollection.CollectionChanged += FixupModerskaber;
                _moderskaber = newCollection;
            }
            return _moderskaber;
        }
        set
        {
            if (!ReferenceEquals(_moderskaber, value))
            {
                var previousValue = _moderskaber as FixupCollection<Hest>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupModerskaber;
                }
                _moderskaber = value;
                var newValue = value as FixupCollection<Hest>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupModerskaber;
                }
            }
        }
    }
    private ICollection<Hest> _moderskaber;

    public virtual Hest Moder
    {
        get { return _moder; }
        set
        {
            if (!ReferenceEquals(_moder, value))
            {
                var previousValue = _moder;
                _moder = value;
                FixupModer(previousValue);
            }
        }
    }
    private Hest _moder;

    public virtual ICollection<Rytter> Ryttere
    {
        get
        {
            if (_ryttere == null)
            {
                var newCollection = new FixupCollection<Rytter>();
                newCollection.CollectionChanged += FixupRyttere;
                _ryttere = newCollection;
            }
            return _ryttere;
        }
        set
        {
            if (!ReferenceEquals(_ryttere, value))
            {
                var previousValue = _ryttere as FixupCollection<Rytter>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupRyttere;
                }
                _ryttere = value;
                var newValue = value as FixupCollection<Rytter>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupRyttere;
                }
            }
        }
    }
    private ICollection<Rytter> _ryttere;

    #endregion
    #region Association Fixup

    private void FixupBillede(Billede previousValue)
    {
        if (previousValue != null && previousValue.Heste.Contains(this))
        {
            previousValue.Heste.Remove(this);
        }

        if (Billede != null)
        {
            if (!Billede.Heste.Contains(this))
            {
                Billede.Heste.Add(this);
            }
        }
    }

    private void FixupFader(Hest previousValue)
    {
        if (previousValue != null && previousValue.Faderskaber.Contains(this))
        {
            previousValue.Faderskaber.Remove(this);
        }

        if (Fader != null)
        {
            if (!Fader.Faderskaber.Contains(this))
            {
                Fader.Faderskaber.Add(this);
            }
        }
    }

    private void FixupModer(Hest previousValue)
    {
        if (previousValue != null && previousValue.Moderskaber.Contains(this))
        {
            previousValue.Moderskaber.Remove(this);
        }

        if (Moder != null)
        {
            if (!Moder.Moderskaber.Contains(this))
            {
                Moder.Moderskaber.Add(this);
            }
        }
    }

    private void FixupEjerskaber(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Ejerskab item in e.NewItems)
            {
                item.Heste = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Ejerskab item in e.OldItems)
            {
                if (ReferenceEquals(item.Heste, this))
                {
                    item.Heste = null;
                }
            }
        }
    }

    private void FixupFaderskaber(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Hest item in e.NewItems)
            {
                item.Fader = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Hest item in e.OldItems)
            {
                if (ReferenceEquals(item.Fader, this))
                {
                    item.Fader = null;
                }
            }
        }
    }

    private void FixupModerskaber(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Hest item in e.NewItems)
            {
                item.Moder = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Hest item in e.OldItems)
            {
                if (ReferenceEquals(item.Moder, this))
                {
                    item.Moder = null;
                }
            }
        }
    }

    private void FixupRyttere(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Rytter item in e.NewItems)
            {
                if (!item.Heste.Contains(this))
                {
                    item.Heste.Add(this);
                }
            }
        }

        if (e.OldItems != null)
        {
            foreach (Rytter item in e.OldItems)
            {
                if (item.Heste.Contains(this))
                {
                    item.Heste.Remove(this);
                }
            }
        }
    }

    #endregion
}
public partial class Rytter
{
    #region Primitive Properties

    public virtual int RytterId
    {
        get;
        set;
    }

    public virtual string Navn
    {
        get;
        set;
    }

    public virtual System.DateTime Fødselsdag
    {
        get;
        set;
    }

    public virtual System.DateTimeOffset RytterAncinitet
    {
        get;
        set;
    }

    public virtual string BilledeSti
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Rytter_Ejer Ryttere_Ejer
    {
        get { return _ryttere_Ejer; }
        set
        {
            if (!ReferenceEquals(_ryttere_Ejer, value))
            {
                var previousValue = _ryttere_Ejer;
                _ryttere_Ejer = value;
                FixupRyttere_Ejer(previousValue);
            }
        }
    }
    private Rytter_Ejer _ryttere_Ejer;

    public virtual ICollection<Hest> Heste
    {
        get
        {
            if (_heste == null)
            {
                var newCollection = new FixupCollection<Hest>();
                newCollection.CollectionChanged += FixupHeste;
                _heste = newCollection;
            }
            return _heste;
        }
        set
        {
            if (!ReferenceEquals(_heste, value))
            {
                var previousValue = _heste as FixupCollection<Hest>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupHeste;
                }
                _heste = value;
                var newValue = value as FixupCollection<Hest>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupHeste;
                }
            }
        }
    }
    private ICollection<Hest> _heste;

    #endregion
    #region Association Fixup

    private void FixupRyttere_Ejer(Rytter_Ejer previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Ryttere, this))
        {
            previousValue.Ryttere = null;
        }

        if (Ryttere_Ejer != null)
        {
            Ryttere_Ejer.Ryttere = this;
        }
    }

    private void FixupHeste(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Hest item in e.NewItems)
            {
                if (!item.Ryttere.Contains(this))
                {
                    item.Ryttere.Add(this);
                }
            }
        }

        if (e.OldItems != null)
        {
            foreach (Hest item in e.OldItems)
            {
                if (item.Ryttere.Contains(this))
                {
                    item.Ryttere.Remove(this);
                }
            }
        }
    }

    #endregion
}
public partial class Rytter_Ejer
{
    #region Primitive Properties

    public virtual int RytterEjerId
    {
        get { return _rytterEjerId; }
        set
        {
            if (_rytterEjerId != value)
            {
                if (Ryttere != null && Ryttere.RytterId != value)
                {
                    Ryttere = null;
                }
                _rytterEjerId = value;
            }
        }
    }
    private int _rytterEjerId;

    #endregion
    #region Navigation Properties

    public virtual ICollection<Ejerskab> Ejerskaber
    {
        get
        {
            if (_ejerskaber == null)
            {
                var newCollection = new FixupCollection<Ejerskab>();
                newCollection.CollectionChanged += FixupEjerskaber;
                _ejerskaber = newCollection;
            }
            return _ejerskaber;
        }
        set
        {
            if (!ReferenceEquals(_ejerskaber, value))
            {
                var previousValue = _ejerskaber as FixupCollection<Ejerskab>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupEjerskaber;
                }
                _ejerskaber = value;
                var newValue = value as FixupCollection<Ejerskab>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupEjerskaber;
                }
            }
        }
    }
    private ICollection<Ejerskab> _ejerskaber;

    public virtual Rytter Ryttere
    {
        get { return _ryttere; }
        set
        {
            if (!ReferenceEquals(_ryttere, value))
            {
                var previousValue = _ryttere;
                _ryttere = value;
                FixupRyttere(previousValue);
            }
        }
    }
    private Rytter _ryttere;

    #endregion
    #region Association Fixup

    private void FixupRyttere(Rytter previousValue)
    {
        if (previousValue != null && ReferenceEquals(previousValue.Ryttere_Ejer, this))
        {
            previousValue.Ryttere_Ejer = null;
        }

        if (Ryttere != null)
        {
            Ryttere.Ryttere_Ejer = this;
            if (RytterEjerId != Ryttere.RytterId)
            {
                RytterEjerId = Ryttere.RytterId;
            }
        }
    }

    private void FixupEjerskaber(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Ejerskab item in e.NewItems)
            {
                item.Ryttere_Ejer = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Ejerskab item in e.OldItems)
            {
                if (ReferenceEquals(item.Ryttere_Ejer, this))
                {
                    item.Ryttere_Ejer = null;
                }
            }
        }
    }

    #endregion
}
